[{"C:\\Internship\\React\\quizapp\\src\\index.js":"1","C:\\Internship\\React\\quizapp\\src\\reportWebVitals.js":"2","C:\\Internship\\React\\quizapp\\src\\component\\main.js":"3","C:\\Internship\\React\\quizapp\\src\\component\\signin\\signin.js":"4","C:\\Internship\\React\\quizapp\\src\\component\\testList\\testList.js":"5"},{"size":600,"mtime":1610008666605,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":425,"mtime":1610017698379,"results":"9","hashOfConfig":"7"},{"size":1728,"mtime":1610017588472,"results":"10","hashOfConfig":"7"},{"size":1014,"mtime":1610022521503,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"2w6cv4",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Internship\\React\\quizapp\\src\\index.js",[],["24","25"],"C:\\Internship\\React\\quizapp\\src\\reportWebVitals.js",[],"C:\\Internship\\React\\quizapp\\src\\component\\main.js",[],"C:\\Internship\\React\\quizapp\\src\\component\\signin\\signin.js",["26","27"],"import React, { useState } from \"react\";\r\nimport \"./signin.css\";\r\nimport data from \"./credential.json\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Signin() {\r\n  const [name, setName] = useState(\"\");\r\n  const [pass, setpass] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const check = (nameInput, passwordInput) => {\r\n    let user = data.find(({ name }) =>\r\n      name.toLowerCase() === nameInput.toLowerCase() ? true : false\r\n    );\r\n    let pass = data.find(({ password }) =>\r\n      password.toLowerCase() === passwordInput.toLowerCase() ? true : false\r\n    );\r\n\r\n    user && pass\r\n      ? localStorage.setItem(\"isUserLoging\", true)\r\n      : localStorage.setItem(\"isUserLoging\", false);\r\n\r\n    console.log(localStorage.getItem(\"isUserLoging\"));\r\n    if (localStorage.getItem(\"isUserLoging\")=='true') {\r\n      console.log(\"in if cond\")\r\n      history.push(\"/testlist\");\r\n    } else {\r\n      console.log(\"in else cond\")\r\n      // alert(\"please login first\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"form registered \">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"user name\"\r\n        name=\"userName\"\r\n        onChange={(e) => {\r\n          setName(e.target.value);\r\n        }}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        id=\"name\"\r\n        placeholder=\"password\"\r\n        onChange={(e) => {\r\n          setpass(e.target.value);\r\n        }}\r\n      />\r\n      <input\r\n        type=\"submit\"\r\n        value=\"LOGIN\"\r\n        className=\"btn\"\r\n        onClick={() => {\r\n          check(name, pass);\r\n        }}\r\n      />\r\n      <p className=\"msg\">\r\n        Not Registered? <a href=\"#\">Register</a>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signin;\r\n","C:\\Internship\\React\\quizapp\\src\\component\\testList\\testList.js",["28"],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":24,"column":45,"nodeType":"35","messageId":"36","endLine":24,"endColumn":47},{"ruleId":"37","severity":1,"message":"38","line":60,"column":25,"nodeType":"39","endLine":60,"endColumn":37},{"ruleId":"33","severity":1,"message":"34","line":12,"column":8,"nodeType":"35","messageId":"36","endLine":12,"endColumn":10},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]